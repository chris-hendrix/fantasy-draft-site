generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  username      String?        @unique
  email         String         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  bucketImage   String?
  admin         Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  info          Json?
  commissioners Commissioner[]
  teamUsers     TeamUser[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model League {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String         @unique
  sport         Sport          @default(baseball)
  url           String?
  commissioners Commissioner[]
  teams         Team[]
  drafts        Draft[]
  players       Player[]
}

model Commissioner {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @map("user_id")
  leagueId  String   @map("league_id")
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  league    League   @relation(fields: [leagueId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, leagueId])
}

model Team {
  id              String           @id @default(cuid())
  leagueId        String
  name            String
  archived        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  league          League           @relation(fields: [leagueId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamUsers       TeamUser[]
  draftOrderSlots DraftOrderSlot[]
  draftPicks      DraftPick[]

  @@unique([leagueId, name])
}

model TeamUser {
  id               String    @id @default(cuid())
  userId           String?
  teamId           String
  inviteEmail      String?
  inviteAcceptedAt DateTime?
  inviteDeclinedAt DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User?     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  team             Team      @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Draft {
  id              String           @id @default(cuid())
  leagueId        String           @map("league_id")
  year            Int
  rounds          Int
  draftTime       DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  league          League           @relation(fields: [leagueId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  draftOrderSlots DraftOrderSlot[]
  draftPicks      DraftPick[]

  @@unique([leagueId, year], name: "LeagueYearUniqueConstraint")
}

model DraftOrderSlot {
  id      String @id @default(cuid())
  draftId String @map("draft_id")
  teamId  String @map("team_id")
  order   Int
  draft   Draft  @relation(fields: [draftId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  team    Team   @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([draftId, teamId])
}

model DraftPick {
  id       String  @id @default(cuid())
  overall  Int
  draftId  String  @map("draft_id")
  teamId   String  @map("team_id")
  playerId String? @map("player_id")
  draft    Draft   @relation(fields: [draftId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  team     Team    @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  player   Player? @relation(fields: [playerId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  @@unique([draftId, overall])
  @@unique([draftId, playerId])
}

model Player {
  id         String      @id @default(cuid())
  leagueId   String      @map("league_id")
  name       String
  year       Int
  data       Json?
  league     League      @relation(fields: [leagueId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  draftSlots DraftPick[]
}

enum Sport {
  baseball
  football
}
