generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URI")
  directUrl = env("DIRECT_URI")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String?
  username      String?        @unique
  email         String         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  bucketImage   String?
  admin         Boolean        @default(false)
  accounts      Account[]
  sessions      Session[]
  info          Json?
  commissioners Commissioner[]
  teamUsers     TeamUser[]
  files         File[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model League {
  id                 String         @id @default(cuid())
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  name               String         @unique
  sport              Sport          @default(baseball)
  url                String?
  rules              String?
  defaultRounds      Int?
  defaultKeeperCount Int?
  commissioners      Commissioner[]
  teams              Team[]
  drafts             Draft[]
  leagueFiles        LeagueFile[]
}

model Commissioner {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @map("user_id")
  leagueId  String   @map("league_id")
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  league    League   @relation(fields: [leagueId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, leagueId])
}

model Team {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  leagueId     String
  name         String
  archivedAt   DateTime?
  league       League        @relation(fields: [leagueId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamUsers    TeamUser[]
  draftTeams   DraftTeam[]
  draftPicks   DraftPick[]
  keeper       Keeper[]
  savedPlayers SavedPlayer[]

  @@unique([leagueId, name])
}

model TeamUser {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           String?
  teamId           String
  inviteEmail      String?
  inviteAcceptedAt DateTime?
  inviteDeclinedAt DateTime?
  user             User?     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  team             Team      @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Draft {
  id               String       @id @default(cuid())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  leagueId         String       @map("league_id")
  year             Int
  rounds           Int
  keeperCount      Int?         @default(0)
  dues             Float        @default(0)
  draftTime        DateTime?
  draftLockDate    DateTime?    @default(now())
  keepersLockDate  DateTime?
  keeperEntryNote  String?
  disableUserDraft Boolean      @default(false)
  league           League       @relation(fields: [leagueId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  players          Player[]
  draftTeams       DraftTeam[]
  draftPicks       DraftPick[]
  keepers          Keeper[]
  leagueFiles      LeagueFile[]

  @@unique([leagueId, year], name: "LeagueYearUniqueConstraint")
}

model DraftTeam {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  draftId      String    @map("draft_id")
  teamId       String    @map("team_id")
  order        Int
  seasonFinish Int?
  seasonData   Json?
  duesPaidAt   DateTime?
  draft        Draft     @relation(fields: [draftId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  team         Team      @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([draftId, teamId])
}

model DraftPick {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  overall        Int
  draftId        String    @map("draft_id")
  teamId         String    @map("team_id")
  playerId       String?   @map("player_id")
  clockStartedAt DateTime?
  draft          Draft     @relation(fields: [draftId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  team           Team      @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  player         Player?   @relation(fields: [playerId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  @@unique([draftId, overall])
  @@unique([draftId, playerId])
}

model Player {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  draftId      String        @map("draft_id")
  name         String
  data         Json?
  draft        Draft         @relation(fields: [draftId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  draftPicks   DraftPick[]
  keepers      Keeper[]
  savedPlayers SavedPlayer[]
}

model Keeper {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  draftId   String   @map("draft_id")
  teamId    String   @map("team_id")
  playerId  String?  @map("player_id")
  round     Int?
  keeps     Int?
  draft     Draft    @relation(fields: [draftId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  player    Player?  @relation(fields: [playerId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  @@unique([draftId, playerId])
}

model SavedPlayer {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  teamId      String   @map("team_id")
  playerId    String?  @map("player_id")
  order       Int?
  isDraftable Boolean?
  notes       String?
  team        Team     @relation(fields: [teamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  player      Player?  @relation(fields: [playerId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  @@unique([teamId, playerId])
}

model File {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  userId      String       @map("user_id")
  name        String
  bucketPath  String
  type        String
  size        Int
  metadata    Json?
  user        User         @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  leagueFiles LeagueFile[]

  @@index([userId])
}

model LeagueFile {
  id        String             @id @default(cuid())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now())
  leagueId  String             @map("league_id")
  draftId   String?            @map("draft_id")
  fileId    String             @map("file_id")
  category  LeagueFileCategory @default(other)
  league    League             @relation(fields: [leagueId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  draft     Draft?             @relation(fields: [draftId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  file      File               @relation(fields: [fileId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([leagueId, fileId])
}

enum Sport {
  baseball
  football
}

enum LeagueFileCategory {
  backup
  deadline_rosters
  league_image
  other
}
